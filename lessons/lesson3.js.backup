// Lesson 3: Les Fonctions
// Contenu √©ducatif pour l'apprentissage des fonctions Python

export const lesson3Data = {
    introduction: {
        icon: 'icon-functions',
        emoji: 'üîß',
        title: 'Qu\'est-ce qu\'une Fonction ?',
        subtitle: 'Organiser le code en blocs',
        content: `
            <div class="section-text">
                Une fonction est un bloc de code qui effectue une t√¢che sp√©cifique. 
                Cela permet de :
            </div>
            <div class="highlight-box">
                <ul style="margin: 10px 0; padding-left: 20px;">
                    <li><strong>R√©utiliser le code</strong> : Ex√©cuter le m√™me bloc plusieurs fois sans r√©√©criture</li>
                    <li><strong>Organiser le code</strong> : Diviser un programme en parties logiques</li>
                    <li><strong>Simplifier la maintenance</strong> : Modifier une t√¢che √† un seul endroit</li>
                </ul>
            </div>
            <div class="concept-animation">
                <h3 style="color: #ffd700; margin-bottom: 15px;">üí° Analogie Spotify</h3>
                <div class="practical-example">
                    <div class="example-title">üéµ Analogie Spotify</div>
                    <p>Imaginez une app comme Spotify : vous tapez le nom d'un artiste (param√®tre), 
                    l'app fait ses recherches dans sa base de donn√©es, et elle vous retourne une playlist (r√©sultat). 
                    Vous n'avez pas besoin de savoir comment l'algorithme fonctionne √† l'int√©rieur !</p>
                </div>
            </div>
        `
    },
    definition: {
        icon: 'icon-code',
        emoji: 'üìù',
        title: 'D√©finir une Fonction Simple',
        subtitle: 'Syntaxe de base avec def',
        content: `
            <div class="section-text">
                Pour cr√©er une fonction, on utilise le mot-cl√© <code>def</code> (pour "d√©finir"), 
                suivi de son nom, de parenth√®ses <code>()</code> et de deux-points <code>:</code>. 
                Le code √† l'int√©rieur doit √™tre indent√© (d√©cal√© de 4 espaces).
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Un exemple de fonction simple\ndef saluer():\n    print(\'Bonjour !\')\n    print(\'Bienvenue dans le programme.\')\n\n# Pour utiliser (ou \'appeler\') la fonction\nsaluer()\n# Affiche :\n# Bonjour !\n# Bienvenue dans le programme.')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Un exemple de fonction simple</span>
<span class="code-keyword">def</span> <span class="code-function">saluer</span>():
    <span class="code-keyword">print</span>(<span class="code-string">"Bonjour !"</span>)
    <span class="code-keyword">print</span>(<span class="code-string">"Bienvenue dans le programme."</span>)

<span class="code-comment"># Pour utiliser (ou "appeler") la fonction</span>
<span class="code-function">saluer</span>()
<span class="code-comment"># Affiche :</span>
<span class="code-comment"># Bonjour !</span>
<span class="code-comment"># Bienvenue dans le programme.</span>
                </div>
            </div>
            <div class="highlight-box">
                <strong>Points importants :</strong><br>
                ‚Ä¢ Le mot-cl√© <code>def</code> d√©finit une fonction<br>
                ‚Ä¢ Les parenth√®ses <code>()</code> contiennent les param√®tres (ici aucun)<br>
                ‚Ä¢ Les deux-points <code>:</code> marquent le d√©but du bloc de code<br>
                ‚Ä¢ L'indentation (4 espaces) d√©finit ce qui appartient √† la fonction
            </div>
        `
    },
    parameters: {
        icon: 'icon-input',
        emoji: 'üì•',
        title: 'Les Param√®tres',
        subtitle: 'Passer des informations',
        content: `
            <div class="section-text">
                Les fonctions peuvent accepter des informations en entr√©e, appel√©es <strong>param√®tres</strong>. 
                Les param√®tres agissent comme des variables temporaires.
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# La fonction \'saluer_personne\' prend un param√®tre \'nom\'\ndef saluer_personne(nom):\n    print(f\"Bonjour, {nom} !\")\n\n# On appelle la fonction avec une valeur\nsaluer_personne(\'Marie\')\nsaluer_personne(\'Alex\')\n# Affiche :\n# Bonjour, Marie !\n# Bonjour, Alex !')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># La fonction 'saluer_personne' prend un param√®tre 'nom'</span>
<span class="code-keyword">def</span> <span class="code-function">saluer_personne</span>(nom):
    <span class="code-keyword">print</span>(<span class="code-string">f"Bonjour, {nom} !"</span>)

<span class="code-comment"># On appelle la fonction avec une valeur</span>
<span class="code-function">saluer_personne</span>(<span class="code-string">"Marie"</span>)
<span class="code-function">saluer_personne</span>(<span class="code-string">"Alex"</span>)
<span class="code-comment"># Affiche :</span>
<span class="code-comment"># Bonjour, Marie !</span>
<span class="code-comment"># Bonjour, Alex !</span>
                </div>
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('def presenter_personne(prenom, age, ville):\n    print(f\"Je m\'appelle {prenom}, j\'ai {age} ans et j\'habite √† {ville}.\")\n\n# Appel avec plusieurs arguments\npresenter_personne(\'Emma\', 16, \'Brooklyn\')\npresenter_personne(\'Lucas\', 15, \'Manhattan\')\n# Affiche :\n# Je m\'appelle Emma, j\'ai 16 ans et j\'habite √† Brooklyn.\n# Je m\'appelle Lucas, j\'ai 15 ans et j\'habite √† Manhattan.')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-keyword">def</span> <span class="code-function">presenter_personne</span>(prenom, age, ville):
    <span class="code-keyword">print</span>(<span class="code-string">f"Je m'appelle {prenom}, j'ai {age} ans et j'habite √† {ville}."</span>)

<span class="code-comment"># Appel avec plusieurs arguments</span>
<span class="code-function">presenter_personne</span>(<span class="code-string">"Emma"</span>, <span class="code-number">16</span>, <span class="code-string">"Brooklyn"</span>)
<span class="code-function">presenter_personne</span>(<span class="code-string">"Lucas"</span>, <span class="code-number">15</span>, <span class="code-string">"Manhattan"</span>)
<span class="code-comment"># Affiche :</span>
<span class="code-comment"># Je m'appelle Emma, j'ai 16 ans et j'habite √† Brooklyn.</span>
<span class="code-comment"># Je m'appelle Lucas, j'ai 15 ans et j'habite √† Manhattan.</span>
                </div>
            </div>
        `
    },
    return_values: {
        icon: 'icon-output',
        emoji: 'üì§',
        title: 'La Valeur de Retour',
        subtitle: 'Renvoyer un r√©sultat',
        content: `
            <div class="section-text">
                Une fonction peut renvoyer une valeur en utilisant le mot-cl√© <code>return</code>. 
                Cette valeur peut ensuite √™tre stock√©e dans une variable ou utilis√©e ailleurs.
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Cette fonction calcule le carr√© d\'un nombre\ndef calculer_carre(nombre):\n    resultat = nombre ** 2\n    return resultat\n\n# On stocke le r√©sultat dans une variable\ncarre_de_5 = calculer_carre(5)\nprint(f\"Le carr√© de 5 est {carre_de_5}.\")\n# Affiche : Le carr√© de 5 est 25.')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Cette fonction calcule le carr√© d'un nombre</span>
<span class="code-keyword">def</span> <span class="code-function">calculer_carre</span>(nombre):
    resultat = nombre ** <span class="code-number">2</span>
    <span class="code-keyword">return</span> resultat

<span class="code-comment"># On stocke le r√©sultat dans une variable</span>
carre_de_5 = <span class="code-function">calculer_carre</span>(<span class="code-number">5</span>)
<span class="code-keyword">print</span>(<span class="code-string">f"Le carr√© de 5 est {carre_de_5}."</span>)
<span class="code-comment"># Affiche : Le carr√© de 5 est 25.</span>
                </div>
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('def calculer_surface_rectangle(longueur, largeur):\\n    surface = longueur * largeur\\n    return f\"La surface du rectangle est de {surface} m¬≤\"\\n\\n# Utilisation\\nmessage = calculer_surface_rectangle(5, 3)\\nprint(message)  # La surface du rectangle est de 15 m¬≤')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-keyword">def</span> <span class="code-function">calculer_surface_rectangle</span>(longueur, largeur):
    surface = longueur * largeur
    <span class="code-keyword">return</span> <span class="code-string">f"La surface du rectangle est de {surface} m¬≤"</span>

<span class="code-comment"># Utilisation</span>
message = <span class="code-function">calculer_surface_rectangle</span>(<span class="code-number">5</span>, <span class="code-number">3</span>)
<span class="code-keyword">print</span>(message)  <span class="code-comment"># La surface du rectangle est de 15 m¬≤</span>
                </div>
            </div>
        `
    },
    docstrings: {
        icon: 'icon-documentation',
        emoji: 'üìö',
        title: 'Les Docstrings',
        subtitle: 'Documenter vos fonctions',
        content: `
            <div class="section-text">
                Une <strong>docstring</strong> est une cha√Æne de caract√®res qui d√©crit ce que fait une fonction. 
                Elle se place juste apr√®s la d√©finition, entre triple guillemets <code>"""</code>.
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('def convertir_celsius_fahrenheit(celsius):\n    \'\'\'\n    Convertit une temp√©rature de Celsius en Fahrenheit.\n    \n    Param√®tre:\n        celsius (float): Temp√©rature en degr√©s Celsius\n    \n    Retourne:\n        float: Temp√©rature en degr√©s Fahrenheit\n    \'\'\'\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\n# Test\ntemp_f = convertir_celsius_fahrenheit(25)\nprint(f\"25¬∞C = {temp_f}¬∞F\")  # 25¬∞C = 77.0¬∞F')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-keyword">def</span> <span class="code-function">convertir_celsius_fahrenheit</span>(celsius):
    <span class="code-string">"""
    Convertit une temp√©rature de Celsius en Fahrenheit.
    
    Param√®tre:
        celsius (float): Temp√©rature en degr√©s Celsius
    
    Retourne:
        float: Temp√©rature en degr√©s Fahrenheit
    """</span>
    fahrenheit = (celsius * <span class="code-number">9</span>/<span class="code-number">5</span>) + <span class="code-number">32</span>
    <span class="code-keyword">return</span> fahrenheit

<span class="code-comment"># Test</span>
temp_f = <span class="code-function">convertir_celsius_fahrenheit</span>(<span class="code-number">25</span>)
<span class="code-keyword">print</span>(<span class="code-string">f"25¬∞C = {temp_f}¬∞F"</span>)  <span class="code-comment"># 25¬∞C = 77.0¬∞F</span>
                </div>
            </div>
            <div class="highlight-box">
                <strong>Bonnes pratiques :</strong><br>
                ‚Ä¢ D√©crivez clairement ce que fait la fonction<br>
                ‚Ä¢ Listez les param√®tres et leurs types<br>
                ‚Ä¢ Indiquez ce que renvoie la fonction<br>
                ‚Ä¢ Ajoutez des exemples si n√©cessaire
            </div>
        `
    },
    complete_example: {
        icon: 'icon-calculator',
        emoji: 'üìä',
        title: 'Exemple Complet',
        subtitle: 'Calculateur de moyenne',
        content: `
            <div class="section-text">
                Voici un exemple complet qui combine tous les concepts : param√®tres, calculs, conditions et return.
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('def calculer_moyenne_notes(note1, note2, note3):\n    \'\'\'\n    Calcule la moyenne de trois notes et donne une appr√©ciation.\n    \n    Param√®tres:\n        note1, note2, note3 (float): Les trois notes sur 20\n    \n    Retourne:\n        str: Message avec la moyenne et l\'appr√©ciation\n    \'\'\'\n    moyenne = (note1 + note2 + note3) / 3\n    \n    # D√©terminer l\'appr√©ciation\n    if moyenne >= 16:\n        appreciation = \"Excellent !\"\n    elif moyenne >= 14:\n        appreciation = \"Bien\"\n    elif moyenne >= 12:\n        appreciation = \"Assez bien\"\n    elif moyenne >= 10:\n        appreciation = \"Passable\"\n    else:\n        appreciation = \"Insuffisant\"\n    \n    return f\"Moyenne : {moyenne:.1f}/20 - {appreciation}\"\n\n# Tests de la fonction\nprint(calculer_moyenne_notes(15, 17, 14))  # Moyenne : 15.3/20 - Bien\nprint(calculer_moyenne_notes(8, 12, 10))   # Moyenne : 10.0/20 - Passable\nprint(calculer_moyenne_notes(18, 19, 17))  # Moyenne : 18.0/20 - Excellent !')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-keyword">def</span> <span class="code-function">calculer_moyenne_notes</span>(note1, note2, note3):
    <span class="code-string">"""
    Calcule la moyenne de trois notes et donne une appr√©ciation.
    
    Param√®tres:
        note1, note2, note3 (float): Les trois notes sur 20
    
    Retourne:
        str: Message avec la moyenne et l'appr√©ciation
    """</span>
    moyenne = (note1 + note2 + note3) / <span class="code-number">3</span>
    
    <span class="code-comment"># D√©terminer l'appr√©ciation</span>
    <span class="code-keyword">if</span> moyenne >= <span class="code-number">16</span>:
        appreciation = <span class="code-string">"Excellent !"</span>
    <span class="code-keyword">elif</span> moyenne >= <span class="code-number">14</span>:
        appreciation = <span class="code-string">"Bien"</span>
    <span class="code-keyword">elif</span> moyenne >= <span class="code-number">12</span>:
        appreciation = <span class="code-string">"Assez bien"</span>
    <span class="code-keyword">elif</span> moyenne >= <span class="code-number">10</span>:
        appreciation = <span class="code-string">"Passable"</span>
    <span class="code-keyword">else</span>:
        appreciation = <span class="code-string">"Insuffisant"</span>
    
    <span class="code-keyword">return</span> <span class="code-string">f"Moyenne : {moyenne:.1f}/20 - {appreciation}"</span>

<span class="code-comment"># Tests de la fonction</span>
<span class="code-keyword">print</span>(<span class="code-function">calculer_moyenne_notes</span>(<span class="code-number">15</span>, <span class="code-number">17</span>, <span class="code-number">14</span>))  <span class="code-comment"># Moyenne : 15.3/20 - Bien</span>
<span class="code-keyword">print</span>(<span class="code-function">calculer_moyenne_notes</span>(<span class="code-number">8</span>, <span class="code-number">12</span>, <span class="code-number">10</span>))   <span class="code-comment"># Moyenne : 10.0/20 - Passable</span>
<span class="code-keyword">print</span>(<span class="code-function">calculer_moyenne_notes</span>(<span class="code-number">18</span>, <span class="code-number">19</span>, <span class="code-number">17</span>))  <span class="code-comment"># Moyenne : 18.0/20 - Excellent !</span>
                </div>
            </div>
        `
    },
    exercises: {
        icon: 'icon-exercises',
        emoji: 'üí™',
        title: 'Exercices d\'Application',
        subtitle: 'Mettre en pratique',
        content: `
            <div class="section-text">
                <strong>Exercices Faciles</strong>
            </div>
            
            <div class="exercise-card">
                <div class="exercise-difficulty">Facile</div>
                <div class="exercise-title">Salutation personnalis√©e</div>
                <div class="exercise-desc">
                    √âcrivez une fonction <code>saluer(prenom)</code> qui prend un pr√©nom en param√®tre et affiche un message de bienvenue personnalis√© avec une f-string.
                </div>
                <div class="exercise-steps">
                    <strong>Ce qu'il faut faire :</strong>
                    <ol>
                        <li>D√©finir la fonction avec <code>def saluer(prenom):</code></li>
                        <li>Utiliser <code>print()</code> avec une f-string</li>
                        <li>Tester la fonction avec diff√©rents pr√©noms</li>
                    </ol>
                </div>
                <div class="highlight-box">
                    <strong>√Ä vous de jouer !</strong><br>
                    Utilisez ce que vous avez appris sur les fonctions et les f-strings.
                </div>
                <div style="text-align: center; margin-top: 15px;">
                    <button class="hint-button" onclick="toggleHint('hint_func1')" style="
                        background: rgba(255, 215, 0, 0.2);
                        border: 2px solid rgba(255, 215, 0, 0.4);
                        border-radius: 8px;
                        padding: 8px 16px;
                        color: #ffd700;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 600;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,215,0,0.3)'" onmouseout="this.style.background='rgba(255,215,0,0.2)'">
                        üí° Indice
                    </button>
                </div>
                <div id="hint_func1" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 1px solid rgba(255, 215, 0, 0.3); border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <strong>üí° Indice :</strong><br>
                    Utilisez la syntaxe <code>f"Bonjour {prenom} !"</code> pour cr√©er le message personnalis√©.
                </div>
            </div>

            <div class="exercise-card">
                <div class="exercise-difficulty">Facile</div>
                <div class="exercise-title">Calculateur simple</div>
                <div class="exercise-desc">
                    Cr√©ez une fonction <code>additionner(a, b)</code> qui prend deux nombres et retourne leur somme. Testez-la avec diff√©rents nombres.
                </div>
                <div class="exercise-steps">
                    <strong>Ce qu'il faut faire :</strong>
                    <ol>
                        <li>D√©finir la fonction avec deux param√®tres</li>
                        <li>Calculer la somme et la retourner avec <code>return</code></li>
                        <li>Tester avec plusieurs couples de nombres</li>
                    </ol>
                </div>
                <div class="highlight-box">
                    <strong>√Ä retenir !</strong><br>
                    Une fonction qui calcule doit utiliser <code>return</code> pour renvoyer le r√©sultat.
                </div>
                <div style="text-align: center; margin-top: 15px;">
                    <button class="hint-button" onclick="toggleHint('hint_func2')" style="
                        background: rgba(255, 215, 0, 0.2);
                        border: 2px solid rgba(255, 215, 0, 0.4);
                        border-radius: 8px;
                        padding: 8px 16px;
                        color: #ffd700;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 600;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,215,0,0.3)'" onmouseout="this.style.background='rgba(255,215,0,0.2)'">
                        üí° Indice
                    </button>
                </div>
                <div id="hint_func2" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 1px solid rgba(255, 215, 0, 0.3); border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <strong>üí° Indice :</strong><br>
                    N'oubliez pas d'utiliser <code>return a + b</code> pour renvoyer le r√©sultat du calcul.
                </div>
            </div>

            <div class="section-text" style="margin-top: 30px;">
                <strong>Exercices Interm√©diaires</strong>
            </div>

            <div class="exercise-card">
                <div class="exercise-difficulty">Moyen</div>
                <div class="exercise-title">Calculateur de TTC</div>
                <div class="exercise-desc">
                    Cr√©ez une fonction <code>calculer_ttc(prix_ht, taux_tva=0.20)</code> qui prend le prix hors taxe et renvoie le prix TTC avec un message format√©.
                </div>
                <div class="exercise-steps">
                    <strong>Ce qu'il faut faire :</strong>
                    <ol>
                        <li>D√©finir la fonction avec un param√®tre par d√©faut pour la TVA</li>
                        <li>Calculer le prix TTC : prix_ht √ó (1 + taux_tva)</li>
                        <li>Retourner un message format√© avec f-string</li>
                    </ol>
                </div>
                <div class="highlight-box">
                    <strong>Nouveau concept !</strong><br>
                    Le param√®tre <code>taux_tva=0.20</code> a une valeur par d√©faut de 20%.
                </div>
                <div style="text-align: center; margin-top: 15px;">
                    <button class="hint-button" onclick="toggleHint('hint_func3')" style="
                        background: rgba(255, 215, 0, 0.2);
                        border: 2px solid rgba(255, 215, 0, 0.4);
                        border-radius: 8px;
                        padding: 8px 16px;
                        color: #ffd700;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 600;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,215,0,0.3)'" onmouseout="this.style.background='rgba(255,215,0,0.2)'">
                        üí° Indice
                    </button>
                </div>
                <div id="hint_func3" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 1px solid rgba(255, 215, 0, 0.3); border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <strong>üí° Indice :</strong><br>
                    Pour un prix HT de 100‚Ç¨ avec 20% de TVA : 100 √ó (1 + 0.20) = 120‚Ç¨ TTC
                </div>
            </div>

            <div class="exercise-card">
                <div class="exercise-difficulty">Moyen</div>
                <div class="exercise-title">Analyseur de notes</div>
                <div class="exercise-desc">
                    Cr√©ez une fonction <code>analyser_note(note)</code> qui retourne une appr√©ciation selon la note sur 20.
                </div>
                <div class="exercise-steps">
                    <strong>Bar√®me :</strong>
                    <ul>
                        <li>16-20 : "Excellent"</li>
                        <li>14-16 : "Bien"</li>
                        <li>12-14 : "Assez bien"</li>
                        <li>10-12 : "Passable"</li>
                        <li>0-10 : "Insuffisant"</li>
                    </ul>
                </div>
                <div class="highlight-box">
                    <strong>Technique !</strong><br>
                    Utilisez des conditions <code>if/elif/else</code> dans votre fonction.
                </div>
                <div style="text-align: center; margin-top: 15px;">
                    <button class="hint-button" onclick="toggleHint('hint_func4')" style="
                        background: rgba(255, 215, 0, 0.2);
                        border: 2px solid rgba(255, 215, 0, 0.4);
                        border-radius: 8px;
                        padding: 8px 16px;
                        color: #ffd700;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 600;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,215,0,0.3)'" onmouseout="this.style.background='rgba(255,215,0,0.2)'">
                        üí° Indice
                    </button>
                </div>
                <div id="hint_func4" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 1px solid rgba(255, 215, 0, 0.3); border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <strong>üí° Indice :</strong><br>
                    Commencez par le cas le plus √©lev√© : <code>if note >= 16:</code> puis descendez.
                </div>
            </div>

            <div class="section-text" style="margin-top: 30px;">
                <strong>Exercices Avanc√©s</strong>
            </div>

            <div class="exercise-card">
                <div class="exercise-difficulty">Expert</div>
                <div class="exercise-title">Calculateur de pourboire NYC</div>
                <div class="exercise-desc">
                    Cr√©ez une fonction <code>calculer_pourboire_nyc(montant_addition, qualite_service)</code> o√π la qualit√© peut √™tre "excellent" (25%), "bon" (20%), "moyen" (15%).
                </div>
                <div class="exercise-steps">
                    <strong>Ce qu'il faut faire :</strong>
                    <ol>
                        <li>D√©finir les taux selon la qualit√© du service</li>
                        <li>Calculer le montant du pourboire</li>
                        <li>Retourner le pourboire ET le total √† payer</li>
                        <li>G√©rer les cas d'erreur (service non reconnu)</li>
                    </ol>
                </div>
                <div class="highlight-box">
                    <strong>Challenge !</strong><br>
                    Utilisez un dictionnaire pour stocker les taux de pourboire par qualit√©.
                </div>
                <div style="text-align: center; margin-top: 15px;">
                    <button class="hint-button" onclick="toggleHint('hint_func5')" style="
                        background: rgba(255, 215, 0, 0.2);
                        border: 2px solid rgba(255, 215, 0, 0.4);
                        border-radius: 8px;
                        padding: 8px 16px;
                        color: #ffd700;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 600;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,215,0,0.3)'" onmouseout="this.style.background='rgba(255,215,0,0.2)'">
                        üí° Indice
                    </button>
                </div>
                <div id="hint_func5" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 1px solid rgba(255, 215, 0, 0.3); border-radius: 8px; padding: 15px; margin-top: 15px;">
                    <strong>üí° Indice :</strong><br>
                    Cr√©ez un dictionnaire : <code>taux = {"excellent": 0.25, "bon": 0.20, "moyen": 0.15}</code>
                </div>
            </div>
        `
    }
};