// Lesson 4: Les Boucles - R√©p√©ter des Actions (Partie 1)
// Contenu √©ducatif pour l'apprentissage des boucles while en Python

export const lesson4Data = {
    intro: {
        icon: 'icon-intro',
        emoji: 'üîÑ',
        title: 'Pourquoi utiliser des Boucles ?',
        subtitle: '√âviter la r√©p√©tition',
        content: `
            <div class="section-text">
                Imaginez que vous deviez afficher <strong>"Bonjour !"</strong> 100 fois.
                √âcrire <code>print("Bonjour !")</code> 100 fois serait fastidieux et inefficace.
                Les boucles permettent d'ex√©cuter le m√™me bloc de code plusieurs fois de suite, de mani√®re automatique.
            </div>
            <div class="concept-animation">
                <h3 style="color: #ffd700; margin-bottom: 20px;">üí° Concept : R√©p√©tition automatique</h3>
                <div class="loop-demo" style="
                    display: grid;
                    grid-template-columns: 1fr auto 1fr;
                    gap: 25px;
                    align-items: center;
                    padding: 25px;
                    background: linear-gradient(135deg, rgba(255, 107, 107, 0.1), rgba(255, 165, 0, 0.1));
                    border-radius: 15px;
                    border: 2px solid rgba(255, 215, 0, 0.3);
                    margin: 20px 0;
                ">
                    <div class="code-repetition" style="
                        background: rgba(255, 107, 107, 0.15);
                        padding: 20px;
                        border-radius: 12px;
                        border: 2px solid rgba(255, 107, 107, 0.3);
                        text-align: center;
                    ">
                        <div style="color: #ff6b6b; font-weight: bold; margin-bottom: 12px; font-size: 0.9rem;">‚ùå R√âP√âTITIF</div>
                        <div class="repetition-item" style="
                            font-family: 'JetBrains Mono', monospace;
                            color: #ff9999;
                            margin: 8px 0;
                            font-size: 0.85rem;
                            background: rgba(0,0,0,0.3);
                            padding: 6px 10px;
                            border-radius: 6px;
                        ">print("Bonjour !")</div>
                        <div class="repetition-item" style="
                            font-family: 'JetBrains Mono', monospace;
                            color: #ff9999;
                            margin: 8px 0;
                            font-size: 0.85rem;
                            background: rgba(0,0,0,0.3);
                            padding: 6px 10px;
                            border-radius: 6px;
                        ">print("Bonjour !")</div>
                        <div class="repetition-item" style="
                            font-family: 'JetBrains Mono', monospace;
                            color: #ff9999;
                            margin: 8px 0;
                            font-size: 0.85rem;
                            background: rgba(0,0,0,0.3);
                            padding: 6px 10px;
                            border-radius: 6px;
                        ">print("Bonjour !")</div>
                        <div style="color: #ffaaaa; font-style: italic; margin-top: 15px; font-size: 0.8rem;">... 97 fois de plus ...</div>
                    </div>
                    <div class="arrow-flow" style="
                        font-size: 2rem;
                        color: #ffd700;
                        font-weight: bold;
                        text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
                        animation: pulse 2s infinite;
                    ">‚Üí</div>
                    <div class="loop-solution" style="
                        background: rgba(76, 175, 80, 0.15);
                        padding: 20px;
                        border-radius: 12px;
                        border: 2px solid rgba(76, 175, 80, 0.4);
                        text-align: center;
                    ">
                        <div style="color: #4caf50; font-weight: bold; margin-bottom: 12px; font-size: 0.9rem;">‚úÖ EFFICACE</div>
                        <div style="
                            font-family: 'JetBrains Mono', monospace;
                            color: #66bb6a;
                            text-align: left;
                            background: rgba(0,0,0,0.3);
                            padding: 15px;
                            border-radius: 8px;
                            font-size: 0.85rem;
                            line-height: 1.4;
                        ">
                            <span style="color: #81c784;">compteur</span> = <span style="color: #ffcc02;">1</span><br>
                            <span style="color: #66bb6a;">while</span> <span style="color: #81c784;">compteur</span> <= <span style="color: #ffcc02;">100</span>:<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #66bb6a;">print</span>(<span style="color: #a5d6a7;">"Bonjour !"</span>)<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #81c784;">compteur</span> += <span style="color: #ffcc02;">1</span>
                        </div>
                    </div>
                </div>
                <div style="
                    text-align: center;
                    margin-top: 20px;
                    padding: 15px;
                    background: rgba(255, 215, 0, 0.1);
                    border: 2px solid rgba(255, 215, 0, 0.3);
                    border-radius: 10px;
                ">
                    <p style="color: #ffd700; font-size: 1.1rem; font-weight: 600; margin: 0;">
                        üéØ Avec une boucle, 4 lignes remplacent 100 !
                    </p>
                </div>
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Exemple : Afficher \\'Bonjour !\\' 100 fois avec une boucle\\ncompteur = 1\\nwhile compteur <= 100:\\n    print(\\'Bonjour !\\')\\n    compteur += 1\\nprint(\\'Termin√© ! J\\'ai affich√© 100 fois Bonjour.\\')\\n')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Exemple : Afficher 'Bonjour !' 100 fois avec une boucle</span>
<span class="code-keyword">compteur</span> = <span class="code-number">1</span>
<span class="code-keyword">while</span> compteur <= <span class="code-number">100</span>:
    <span class="code-keyword">print</span>(<span class="code-string">'Bonjour !'</span>)
    compteur += <span class="code-number">1</span>
<span class="code-keyword">print</span>(<span class="code-string">'Termin√© ! J\'ai affich√© 100 fois Bonjour.'</span>)
                </div>
            </div>
            <div class="console-output">
                Bonjour !<br>
                Bonjour !<br>
                Bonjour !<br>
                ... (97 lignes de plus) ...<br>
                Bonjour !<br>
                Termin√© ! J'ai affich√© 100 fois Bonjour.
            </div>
            <div class="highlight-box">
                <strong>Avantages des boucles :</strong>
                <ul style="margin-top: 10px; padding-left: 20px;">
                    <li>√âviter la r√©p√©tition de code</li>
                    <li>Traiter des donn√©es de taille variable</li>
                    <li>Cr√©er des programmes interactifs</li>
                    <li>Automatiser des t√¢ches r√©p√©titives</li>
                </ul>
            </div>
        `
    },
    while_basics: {
        icon: 'icon-loop',
        emoji: 'üîÅ',
        title: 'La Boucle while',
        subtitle: 'Tant que...',
        content: `
            <div class="section-text">
                La boucle <code>while</code> (qui signifie "tant que" en anglais) est la plus simple √† comprendre.
                Elle ex√©cute un bloc de code <strong>tant qu'une condition est vraie</strong> (True).
            </div>
            <div class="concept-animation">
                <h3 style="color: #ffd700; margin-bottom: 20px;">üéÆ Analogie : Jeu vid√©o</h3>
                <div class="game-analogy">
                    <div class="game-status">
                        <div class="health-bar">
                            <div class="health-fill" style="width: 80%;"></div>
                        </div>
                        <div style="color: #4caf50; font-weight: bold;">Points de vie : 80/100</div>
                    </div>
                    <div class="game-logic">
                        <div style="color: #ffd700; font-weight: bold;">Tant que points_de_vie > 0 :</div>
                        <div style="color: #ccc; margin-left: 20px;">‚Üí Le joueur peut continuer</div>
                        <div style="color: #ff6b6b; font-weight: bold; margin-top: 10px;">Si points_de_vie = 0 :</div>
                        <div style="color: #ccc; margin-left: 20px;">‚Üí Game Over !</div>
                    </div>
                </div>
                <p style="color: #ccc; font-size: 0.9rem;">La boucle continue tant que la condition est respect√©e</p>
            </div>
            <div class="highlight-box">
                <strong>Syntaxe de base :</strong><br>
                <code style="color: #ffd700; font-family: monospace;">
                    while condition_est_vraie:<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;# Bloc de code √† r√©p√©ter<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;# Il faut pr√©voir un moyen de rendre la condition fausse !
                </code>
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Exemple simple de boucle while\\ncompteur = 1\\nwhile compteur <= 3:\\n    print(f\\'Tour num√©ro {compteur}\\')\\n    compteur += 1\\nprint(\\'Boucle termin√©e !\\')\\n')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Exemple simple de boucle while</span>
<span class="code-keyword">compteur</span> = <span class="code-number">1</span>
<span class="code-keyword">while</span> compteur <= <span class="code-number">3</span>:
    <span class="code-keyword">print</span>(<span class="code-string">f'Tour num√©ro {compteur}'</span>)
    compteur += <span class="code-number">1</span>
<span class="code-keyword">print</span>(<span class="code-string">'Boucle termin√©e !'</span>)
                </div>
            </div>
            <div class="console-output">
                Tour num√©ro 1<br>
                Tour num√©ro 2<br>
                Tour num√©ro 3<br>
                Boucle termin√©e !
            </div>
        `
    },
    loop_anatomy: {
        icon: 'icon-structure',
        emoji: 'üß©',
        title: 'Anatomie d\'une Boucle',
        subtitle: 'Les 4 √©tapes essentielles',
        content: `
            <div class="section-text">
                Toute boucle <code>while</code> bien construite suit 4 √©tapes essentielles.
                Regardons comment afficher les nombres de 1 √† 5.
            </div>
            <div class="concept-animation">
                <h3 style="color: #ffd700; margin-bottom: 20px;">üî¢ Les 4 √©tapes d'une boucle</h3>
                <div class="loop-steps">
                    <div class="step-item">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <div class="step-title">Initialisation</div>
                            <div class="step-desc">Cr√©er la variable de contr√¥le</div>
                            <code>compteur = 1</code>
                        </div>
                    </div>
                    <div class="step-item">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <div class="step-title">Condition</div>
                            <div class="step-desc">Tester si on continue</div>
                            <code>while compteur <= 5:</code>
                        </div>
                    </div>
                    <div class="step-item">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <div class="step-title">Corps</div>
                            <div class="step-desc">Le code √† r√©p√©ter</div>
                            <code>print(f"Compteur : {compteur}")</code>
                        </div>
                    </div>
                    <div class="step-item">
                        <div class="step-number">4</div>
                        <div class="step-content">
                            <div class="step-title">Modification</div>
                            <div class="step-desc">Changer la variable</div>
                            <code>compteur += 1</code>
                        </div>
                    </div>
                </div>
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Exemple d√©taill√© avec les 4 √©tapes\\n# 1. Initialisation\\ncompteur = 1\\n\\n# 2. Condition\\nwhile compteur <= 5:\\n    # 3. Corps de la boucle\\n    print(f\\'Le compteur est √† : {compteur}\\')\\n    \\n    # 4. Modification (TR√àS IMPORTANT !)\\n    compteur = compteur + 1  # ou compteur += 1\\n\\nprint(\\'La boucle est termin√©e !\\')\\n')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Exemple d√©taill√© avec les 4 √©tapes</span>
<span class="code-comment"># 1. Initialisation</span>
<span class="code-keyword">compteur</span> = <span class="code-number">1</span>

<span class="code-comment"># 2. Condition</span>
<span class="code-keyword">while</span> compteur <= <span class="code-number">5</span>:
    <span class="code-comment"># 3. Corps de la boucle</span>
    <span class="code-keyword">print</span>(<span class="code-string">f'Le compteur est √† : {compteur}'</span>)

    <span class="code-comment"># 4. Modification (TR√àS IMPORTANT !)</span>
    compteur = compteur + <span class="code-number">1</span>  <span class="code-comment"># ou compteur += 1</span>

<span class="code-keyword">print</span>(<span class="code-string">'La boucle est termin√©e !'</span>)
                </div>
            </div>
            <div class="console-output">
                Le compteur est √† : 1<br>
                Le compteur est √† : 2<br>
                Le compteur est √† : 3<br>
                Le compteur est √† : 4<br>
                Le compteur est √† : 5<br>
                La boucle est termin√©e !
            </div>
            <div class="warning-banner">
                <strong>R√®gle d'or :</strong> Assurez-vous toujours qu'il existe un moyen pour que la condition de la boucle devienne fausse !
            </div>
        `
    },
    infinite_loop: {
        icon: 'icon-warning',
        emoji: '‚ö†Ô∏è',
        title: 'Le Pi√®ge : La Boucle Infinie',
        subtitle: '√Ä √©viter absolument !',
        content: `
            <div class="section-text">
                Que se passe-t-il si on oublie l'√©tape de modification ? On obtient une <strong>boucle infinie</strong> !
                Le programme ne s'arr√™tera jamais car la condition restera toujours vraie.
            </div>
            <div class="concept-animation">
                <h3 style="color: #ff6b6b; margin-bottom: 20px;">üíÄ Danger : Code qui ne s'arr√™te jamais</h3>
                <div class="danger-demo">
                    <div class="infinite-code">
                        <div style="color: #ff6b6b; font-weight: bold;">‚ùå MAUVAIS EXEMPLE</div>
                        <div style="font-family: monospace; background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;">
                            compteur = 1<br>
                            while compteur &lt;= 5:<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;print("Au secours, je suis bloqu√© !")<br>
                            &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #ff6b6b;"># On a oubli√© : compteur += 1</span>
                        </div>
                    </div>
                    <div class="infinite-result">
                        <div style="color: #ff6b6b; font-weight: bold;">R√©sultat :</div>
                        <div style="color: #ccc; font-style: italic;">
                            Au secours, je suis bloqu√© !<br>
                            Au secours, je suis bloqu√© !<br>
                            Au secours, je suis bloqu√© !<br>
                            <span style="color: #ff6b6b;">... √† l'infini ...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="warning-banner">
                <strong>Comment arr√™ter une boucle infinie :</strong><br>
                Dans la console Python, utilisez le raccourci <kbd>Ctrl + C</kbd> pour forcer l'arr√™t du programme.
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Exemple CORRECT - √âviter la boucle infinie\\ncompteur = 1\\nwhile compteur <= 3:\\n    print(f\\'Iteration {compteur} - Tout va bien !\\')\\n    compteur += 1  # N\\'oubliez JAMAIS cette ligne !\\nprint(\\'Boucle termin√©e correctement\\')\\n')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Exemple CORRECT - √âviter la boucle infinie</span>
<span class="code-keyword">compteur</span> = <span class="code-number">1</span>
<span class="code-keyword">while</span> compteur <= <span class="code-number">3</span>:
    <span class="code-keyword">print</span>(<span class="code-string">f'It√©ration {compteur} - Tout va bien !'</span>)
    compteur += <span class="code-number">1</span>  <span class="code-comment"># N'oubliez JAMAIS cette ligne !</span>
<span class="code-keyword">print</span>(<span class="code-string">'Boucle termin√©e correctement'</span>)
                </div>
            </div>
            <div class="quiz-container">
                <div class="quiz-question">üß† Quiz : Que faut-il toujours faire dans une boucle while ?</div>
                <div class="quiz-options">
                    <div class="quiz-option" data-correct="false">Utiliser print() dans le corps</div>
                    <div class="quiz-option" data-correct="true">Modifier la variable de condition</div>
                    <div class="quiz-option" data-correct="false">Utiliser des f-strings</div>
                    <div class="quiz-option" data-correct="false">Initialiser √† 0</div>
                </div>
                <button class="quiz-submit-btn" onclick="checkInfiniteLoopQuiz()">V√©rifier</button>
                <div class="quiz-feedback" id="infiniteLoopQuizFeedback"></div>
            </div>
        `
    },
    interactive_menu: {
        icon: 'icon-menu',
        emoji: 'üìã',
        title: 'Menu Interactif',
        subtitle: 'Programmes qui tournent',
        content: `
            <div class="section-text">
                Une boucle <code>while</code> est parfaite pour des programmes qui doivent tourner
                jusqu'√† ce que l'utilisateur d√©cide de les quitter. Voici un exemple de menu interactif.
            </div>
            <div class="code-block">
                <button class="code-load-button" onclick="loadCodeIntoConsole('# Menu interactif avec boucle while\\n# On initialise la variable de choix avant la boucle\\nchoix = \\\"\\\"\\n\\n# La boucle continue tant que l\\'utilisateur ne tape pas \\\"quitter\\\"\\nwhile choix != \\\"quitter\\\":\\n    print(\\\"\\\\n--- MENU ---\\\")\\n    print(\\\"1. Dire bonjour\\\")\\n    print(\\\"2. Dire au revoir\\\")\\n    print(\\\"3. Calculer 2 + 2\\\")\\n    print(\\\"Tapez \\'quitter\\' pour arr√™ter.\\\")\\n    \\n    choix = input(\\\"Votre choix ? \\\")\\n\\n    if choix == \\\"1\\\":\\n        print(\\\"Bonjour √† vous !\\\")\\n    elif choix == \\\"2\\\":\\n        print(\\\"Au revoir !\\\")\\n    elif choix == \\\"3\\\":\\n        print(\\\"2 + 2 = 4\\\")\\n    elif choix == \\\"quitter\\\":\\n        print(\\\"Programme termin√©.\\\")\\n    else:\\n        print(\\\"Choix invalide, veuillez r√©essayer.\\\")\\n')">
                    üêç Charger
                </button>
                <div class="code-content">
<span class="code-comment"># Menu interactif avec boucle while</span>
<span class="code-comment"># On initialise la variable de choix avant la boucle</span>
<span class="code-keyword">choix</span> = <span class="code-string">""</span>

<span class="code-comment"># La boucle continue tant que l'utilisateur ne tape pas "quitter"</span>
<span class="code-keyword">while</span> choix != <span class="code-string">"quitter"</span>:
    <span class="code-keyword">print</span>(<span class="code-string">"\n--- MENU ---"</span>)
    <span class="code-keyword">print</span>(<span class="code-string">"1. Dire bonjour"</span>)
    <span class="code-keyword">print</span>(<span class="code-string">"2. Dire au revoir"</span>)
    <span class="code-keyword">print</span>(<span class="code-string">"3. Calculer 2 + 2"</span>)
    <span class="code-keyword">print</span>(<span class="code-string">"Tapez 'quitter' pour arr√™ter."</span>)

    choix = <span class="code-keyword">input</span>(<span class="code-string">"Votre choix ? "</span>)

    <span class="code-keyword">if</span> choix == <span class="code-string">"1"</span>:
        <span class="code-keyword">print</span>(<span class="code-string">"Bonjour √† vous !"</span>)
    <span class="code-keyword">elif</span> choix == <span class="code-string">"2"</span>:
        <span class="code-keyword">print</span>(<span class="code-string">"Au revoir !"</span>)
    <span class="code-keyword">elif</span> choix == <span class="code-string">"3"</span>:
        <span class="code-keyword">print</span>(<span class="code-string">"2 + 2 = 4"</span>)
    <span class="code-keyword">elif</span> choix == <span class="code-string">"quitter"</span>:
        <span class="code-keyword">print</span>(<span class="code-string">"Programme termin√©."</span>)
    <span class="code-keyword">else</span>:
        <span class="code-keyword">print</span>(<span class="code-string">"Choix invalide, veuillez r√©essayer."</span>)
                </div>
            </div>
            <div class="highlight-box">
                <strong>Points cl√©s :</strong>
                <ul style="margin-top: 10px; padding-left: 20px;">
                    <li>La variable <code>choix</code> est initialis√©e avant la boucle</li>
                    <li>La condition v√©rifie si l'utilisateur veut quitter</li>
                    <li>Le choix est demand√© √† chaque tour de boucle</li>
                    <li>La boucle s'arr√™te quand choix = "quitter"</li>
                </ul>
            </div>
            <div class="console-output">
                <strong>Exemple d'ex√©cution :</strong><br>
                --- MENU ---<br>
                1. Dire bonjour<br>
                2. Dire au revoir<br>
                3. Calculer 2 + 2<br>
                Tapez 'quitter' pour arr√™ter.<br>
                Votre choix ? 1<br>
                Bonjour √† vous !<br><br>
                --- MENU ---<br>
                ...<br>
                Votre choix ? quitter<br>
                Programme termin√©.
            </div>
        `
    },
    exercises: {
        icon: 'icon-exercises',
        emoji: 'üíª',
        title: 'Exercices d\'Application',
        subtitle: 'Pratiquez les boucles while !',
        content: `
            <div class="section-text">
                Voici 6 exercices progressifs pour ma√Ætriser les boucles <code>while</code>. Commencez par les faciles !
            </div>
            <div class="exercises-grid">
                <div class="exercise-card">
                    <div class="exercise-difficulty">Facile</div>
                    <div class="exercise-title">D√©compte de Fus√©e</div>
                    <div class="exercise-desc">
                        √âcrivez un programme qui utilise une boucle while pour compter de 10 √† 1, puis qui affiche "D√©collage !".
                    </div>

                    <div class="exercise-steps">
                        <strong>Ce qu'il faut faire :</strong>
                        <ol>
                            <li>Initialiser <code>compteur = 10</code></li>
                            <li>Boucle tant que <code>compteur >= 1</code></li>
                            <li>Afficher le compteur</li>
                            <li>D√©cr√©menter le compteur</li>
                            <li>Afficher "D√©collage !" apr√®s la boucle</li>
                        </ol>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="hint-button" onclick="toggleHint('hint4_1')" style="
                            background: rgba(255, 215, 0, 0.2);
                            border: 2px solid rgba(255, 215, 0, 0.4);
                            border-radius: 8px;
                            padding: 8px 16px;
                            color: #ffd700;
                            cursor: pointer;
                            font-size: 0.9rem;
                            font-weight: 600;
                        ">üí° Indice</button>
                    </div>
                    <div id="hint4_1" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 2px solid rgba(255, 215, 0, 0.3); border-radius: 12px; padding: 15px; margin-top: 15px; color: #ffd700;">
                        üîç <strong>Indice :</strong> N'oubliez pas de d√©cr√©menter avec <code>compteur -= 1</code> ou <code>compteur = compteur - 1</code>.
                    </div>
                    <div class="console-output">
                        <strong>R√©sultat attendu :</strong><br>
                        10<br>9<br>8<br>7<br>6<br>5<br>4<br>3<br>2<br>1<br>D√©collage !
                    </div>
                </div>

                <div class="exercise-card">
                    <div class="exercise-difficulty">Facile</div>
                    <div class="exercise-title">Table de Multiplication</div>
                    <div class="exercise-desc">
                        Demandez un nombre √† l'utilisateur. Utilisez une boucle while pour afficher sa table de multiplication de 1 √† 10.
                    </div>

                    <div class="exercise-steps">
                        <strong>Ce qu'il faut faire :</strong>
                        <ol>
                            <li>Demander le nombre avec <code>input()</code></li>
                            <li>Convertir en entier avec <code>int()</code></li>
                            <li>Compteur de 1 √† 10</li>
                            <li>Afficher "nombre x compteur = r√©sultat"</li>
                        </ol>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="hint-button" onclick="toggleHint('hint4_2')" style="
                            background: rgba(255, 215, 0, 0.2);
                            border: 2px solid rgba(255, 215, 0, 0.4);
                            border-radius: 8px;
                            padding: 8px 16px;
                            color: #ffd700;
                            cursor: pointer;
                            font-size: 0.9rem;
                            font-weight: 600;
                        ">üí° Indice</button>
                    </div>
                    <div id="hint4_2" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 2px solid rgba(255, 215, 0, 0.3); border-radius: 12px; padding: 15px; margin-top: 15px; color: #ffd700;">
                        üîç <strong>Indice :</strong> Utilisez <code>print(f"{nombre} x {i} = {nombre * i}")</code> dans la boucle.
                    </div>
                    <div class="console-output">
                        <strong>Exemple (pour 7) :</strong><br>
                        7 x 1 = 7<br>
                        7 x 2 = 14<br>
                        7 x 3 = 21<br>
                        ... jusqu'√† 10
                    </div>
                </div>

                <div class="exercise-card">
                    <div class="exercise-difficulty">Moyen</div>
                    <div class="exercise-title">Calculateur de Somme</div>
                    <div class="exercise-desc">
                        Demandez des nombres √† l'utilisateur les uns apr√®s les autres. Chaque nombre est ajout√© √† une somme totale. La boucle s'arr√™te quand l'utilisateur entre 0. Affichez la somme finale.
                    </div>

                    <div class="exercise-steps">
                        <strong>Ce qu'il faut faire :</strong>
                        <ol>
                            <li>Initialiser <code>somme = 0</code> et <code>nombre = 1</code></li>
                            <li>Boucle tant que <code>nombre != 0</code></li>
                            <li>Demander un nombre</li>
                            <li>Si diff√©rent de 0, l'ajouter √† la somme</li>
                            <li>Afficher la somme finale</li>
                        </ol>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="hint-button" onclick="toggleHint('hint4_3')" style="
                            background: rgba(255, 215, 0, 0.2);
                            border: 2px solid rgba(255, 215, 0, 0.4);
                            border-radius: 8px;
                            padding: 8px 16px;
                            color: #ffd700;
                            cursor: pointer;
                            font-size: 0.9rem;
                            font-weight: 600;
                        ">üí° Indice</button>
                    </div>
                    <div id="hint4_3" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 2px solid rgba(255, 215, 0, 0.3); border-radius: 12px; padding: 15px; margin-top: 15px; color: #ffd700;">
                        üîç <strong>Indice :</strong> N'ajoutez le nombre √† la somme que s'il n'est pas √©gal √† 0.
                    </div>
                    <div class="console-output">
                        <strong>Exemple :</strong><br>
                        Entrez un nombre (0 pour arr√™ter) : 5<br>
                        Entrez un nombre (0 pour arr√™ter) : 3<br>
                        Entrez un nombre (0 pour arr√™ter) : 7<br>
                        Entrez un nombre (0 pour arr√™ter) : 0<br>
                        Somme totale : 15
                    </div>
                </div>

                <div class="exercise-card">
                    <div class="exercise-difficulty">Avanc√©</div>
                    <div class="exercise-title">Calcul de Factorielle</div>
                    <div class="exercise-desc">
                        La factorielle de n (not√©e n!) est le produit de tous les entiers de 1 √† n.
                        Par exemple, 5! = 1 √ó 2 √ó 3 √ó 4 √ó 5 = 120.
                    </div>

                    <div class="exercise-steps">
                        <strong>Ce qu'il faut faire :</strong>
                        <ol>
                            <li>Demander un nombre entier positif</li>
                            <li>Initialiser <code>factorielle = 1</code> et <code>i = 1</code></li>
                            <li>Boucle tant que <code>i <= nombre</code></li>
                            <li>Multiplier factorielle par i</li>
                            <li>Incr√©menter i</li>
                        </ol>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="hint-button" onclick="toggleHint('hint4_4')" style="
                            background: rgba(255, 215, 0, 0.2);
                            border: 2px solid rgba(255, 215, 0, 0.4);
                            border-radius: 8px;
                            padding: 8px 16px;
                            color: #ffd700;
                            cursor: pointer;
                            font-size: 0.9rem;
                            font-weight: 600;
                        ">üí° Indice</button>
                    </div>
                    <div id="hint4_4" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 2px solid rgba(255, 215, 0, 0.3); border-radius: 12px; padding: 15px; margin-top: 15px; color: #ffd700;">
                        üîç <strong>Indice :</strong> Utilisez <code>factorielle *= i</code> qui √©quivaut √† <code>factorielle = factorielle * i</code>.
                    </div>
                    <div class="console-output">
                        <strong>Exemple :</strong><br>
                        Entrez un nombre : 5<br>
                        5! = 120
                    </div>
                </div>

                <div class="exercise-card">
                    <div class="exercise-difficulty">Avanc√©</div>
                    <div class="exercise-title">Conjecture de Collatz</div>
                    <div class="exercise-desc">
                        Partant d'un nombre, si il est pair on le divise par 2, si il est impair on le multiplie par 3 et on ajoute 1. On r√©p√®te jusqu'√† atteindre 1.
                    </div>

                    <div class="exercise-steps">
                        <strong>Ce qu'il faut faire :</strong>
                        <ol>
                            <li>Demander le nombre de d√©part</li>
                            <li>Initialiser <code>etapes = 0</code></li>
                            <li>Tant que <code>nombre != 1</code></li>
                            <li>Si pair : <code>nombre //= 2</code></li>
                            <li>Si impair : <code>nombre = nombre * 3 + 1</code></li>
                            <li>Afficher chaque valeur et compter les √©tapes</li>
                        </ol>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="hint-button" onclick="toggleHint('hint4_5')" style="
                            background: rgba(255, 215, 0, 0.2);
                            border: 2px solid rgba(255, 215, 0, 0.4);
                            border-radius: 8px;
                            padding: 8px 16px;
                            color: #ffd700;
                            cursor: pointer;
                            font-size: 0.9rem;
                            font-weight: 600;
                        ">üí° Indice</button>
                    </div>
                    <div id="hint4_5" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 2px solid rgba(255, 215, 0, 0.3); border-radius: 12px; padding: 15px; margin-top: 15px; color: #ffd700;">
                        üîç <strong>Indice :</strong> Utilisez <code>nombre % 2 == 0</code> pour tester si le nombre est pair.
                    </div>
                    <div class="console-output">
                        <strong>Exemple (d√©part : 7) :</strong><br>
                        7 ‚Üí 22 ‚Üí 11 ‚Üí 34 ‚Üí 17 ‚Üí 52 ‚Üí 26 ‚Üí 13 ‚Üí 40 ‚Üí 20 ‚Üí 10 ‚Üí 5 ‚Üí 16 ‚Üí 8 ‚Üí 4 ‚Üí 2 ‚Üí 1<br>
                        Nombre d'√©tapes : 16
                    </div>
                </div>

                <div class="exercise-card">
                    <div class="exercise-difficulty">Expert</div>
                    <div class="exercise-title">Chercheur de Diviseurs</div>
                    <div class="exercise-desc">
                        Demandez un nombre entier √† l'utilisateur. Trouvez et affichez tous ses diviseurs (nombres qui le divisent sans reste).
                    </div>

                    <div class="exercise-steps">
                        <strong>Ce qu'il faut faire :</strong>
                        <ol>
                            <li>Demander le nombre</li>
                            <li>Initialiser <code>diviseur = 1</code></li>
                            <li>Tant que <code>diviseur <= nombre</code></li>
                            <li>Si <code>nombre % diviseur == 0</code> : c'est un diviseur</li>
                            <li>Incr√©menter le diviseur</li>
                        </ol>
                    </div>
                    <div style="text-align: center; margin-top: 15px;">
                        <button class="hint-button" onclick="toggleHint('hint4_6')" style="
                            background: rgba(255, 215, 0, 0.2);
                            border: 2px solid rgba(255, 215, 0, 0.4);
                            border-radius: 8px;
                            padding: 8px 16px;
                            color: #ffd700;
                            cursor: pointer;
                            font-size: 0.9rem;
                            font-weight: 600;
                        ">üí° Indice</button>
                    </div>
                    <div id="hint4_6" class="hint-content" style="display: none; background: rgba(255, 215, 0, 0.1); border: 2px solid rgba(255, 215, 0, 0.3); border-radius: 12px; padding: 15px; margin-top: 15px; color: #ffd700;">
                        üîç <strong>Indice :</strong> L'op√©rateur modulo <code>%</code> donne le reste de la division. Si le reste est 0, c'est un diviseur.
                    </div>
                    <div class="console-output">
                        <strong>Exemple (pour 12) :</strong><br>
                        Les diviseurs de 12 sont :<br>
                        1, 2, 3, 4, 6, 12
                    </div>
                </div>
            </div>

            <div class="highlight-box" style="margin-top: 30px;">
                <strong>Points cl√©s √† retenir :</strong>
                <ul style="margin-top: 10px; padding-left: 20px;">
                    <li>La boucle while r√©p√®te tant qu'une condition est vraie</li>
                    <li>Toujours inclure une modification pour √©viter l'infini</li>
                    <li>Parfaites pour les validations et menus interactifs</li>
                    <li>Tester avec de petites valeurs d'abord</li>
                </ul>
            </div>
        `
    }
};